<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hrim.Event.Analytics.Models</name>
    </assembly>
    <members>
        <member name="T:Hrim.Event.Analytics.Models.Entities.Entity">
            <summary> Each entity own these properties </summary>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="M:Hrim.Event.Analytics.Models.Entities.Entity.#ctor(System.Guid,System.DateTime,System.Nullable{System.DateTime},System.Boolean,System.Int32)">
            <summary> Each entity own these properties </summary>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.Entities.Entity.Id">
            <summary>Entity id</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.Entities.Entity.CreatedAt">
            <summary>Date and UTC time of event_type creation</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.Entities.Entity.UpdateAt">
            <summary>Date and UTC time of event_type last update</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.Entities.Entity.IsDeleted">
            <summary>Soft deletion flag</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.Entities.Entity.ConcurrentToken">
            <summary>Update is possible only this token equals to the token in the storage</summary>
        </member>
        <member name="T:Hrim.Event.Analytics.Models.EventTypes.SystemEventType">
            <summary>
            Base events is an abstraction that shares features and behaviour among all other event_types.
            <br/>https://hrimsoft.atlassian.net/wiki/spaces/HRIMCALEND/pages/65566/System+Event+Types
            </summary>
            <param name="Name">User event type name, e.g. 'nice mood', 'headache', etc</param>
            <param name="Description">Description given by user, when user_event_type based on this one will be created.</param>
            <param name="Color">A color that events will be drawing with in a calendar.</param>
            <param name="Tags">A list of tags that will be automatically set to an each event</param>
            <param name="IsPublic">An owner who created this user_event_type could share it with other end-users</param>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="M:Hrim.Event.Analytics.Models.EventTypes.SystemEventType.#ctor(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.DateTime,System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Base events is an abstraction that shares features and behaviour among all other event_types.
            <br/>https://hrimsoft.atlassian.net/wiki/spaces/HRIMCALEND/pages/65566/System+Event+Types
            </summary>
            <param name="Name">User event type name, e.g. 'nice mood', 'headache', etc</param>
            <param name="Description">Description given by user, when user_event_type based on this one will be created.</param>
            <param name="Color">A color that events will be drawing with in a calendar.</param>
            <param name="Tags">A list of tags that will be automatically set to an each event</param>
            <param name="IsPublic">An owner who created this user_event_type could share it with other end-users</param>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.SystemEventType.Name">
            <summary>User event type name, e.g. 'nice mood', 'headache', etc</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.SystemEventType.Description">
            <summary>Description given by user, when user_event_type based on this one will be created.</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.SystemEventType.Color">
            <summary>A color that events will be drawing with in a calendar.</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.SystemEventType.Tags">
            <summary>A list of tags that will be automatically set to an each event</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.SystemEventType.IsPublic">
            <summary>An owner who created this user_event_type could share it with other end-users</summary>
        </member>
        <member name="T:Hrim.Event.Analytics.Models.EventTypes.OccurrenceEventType">
            <summary>
            When the main importance is the fact that an event occurred.
            <br/>This kind of events may occur several times a day.
            </summary>
            <param name="OccurredAt">Date and time with end-user timezone when an event occurred</param>
            <param name="Name">User event type name, e.g. 'nice mood', 'headache', etc</param>
            <param name="Description">Description given by user, when user_event_type based on this one will be created.</param>
            <param name="Color">A color that events will be drawing with in a calendar.</param>
            <param name="Tags">A list of tags that will be automatically set to an each event</param>
            <param name="IsPublic">An owner who created this user_event_type could share it with other end-users</param>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="M:Hrim.Event.Analytics.Models.EventTypes.OccurrenceEventType.#ctor(System.Guid,System.DateTimeOffset,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.DateTime,System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            When the main importance is the fact that an event occurred.
            <br/>This kind of events may occur several times a day.
            </summary>
            <param name="OccurredAt">Date and time with end-user timezone when an event occurred</param>
            <param name="Name">User event type name, e.g. 'nice mood', 'headache', etc</param>
            <param name="Description">Description given by user, when user_event_type based on this one will be created.</param>
            <param name="Color">A color that events will be drawing with in a calendar.</param>
            <param name="Tags">A list of tags that will be automatically set to an each event</param>
            <param name="IsPublic">An owner who created this user_event_type could share it with other end-users</param>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.OccurrenceEventType.OccurredAt">
            <summary>Date and time with end-user timezone when an event occurred</summary>
        </member>
        <member name="T:Hrim.Event.Analytics.Models.EventTypes.DurationEventType">
            <summary>
            When it is important to register an event that has start time and end time this system_event_type can be used.
            <br/>This kind of events may occur several times a day.
            </summary>
            <param name="StartedAt">Date and time with end-user timezone when en event starts</param>
            <param name="FinishedAt">Date and time with end-user timezone when an event finishes</param>
            <param name="Name">User event type name, e.g. 'nice mood', 'headache', etc</param>
            <param name="Description">Description given by user, when user_event_type based on this one will be created.</param>
            <param name="Color">A color that events will be drawing with in a calendar.</param>
            <param name="Tags">A list of tags that will be automatically set to an each event</param>
            <param name="IsPublic">An owner who created this user_event_type could share it with other end-users</param>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="M:Hrim.Event.Analytics.Models.EventTypes.DurationEventType.#ctor(System.Guid,System.DateTimeOffset,System.DateTimeOffset,System.String,System.String,System.String,System.Collections.Generic.IList{System.String},System.DateTime,System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            When it is important to register an event that has start time and end time this system_event_type can be used.
            <br/>This kind of events may occur several times a day.
            </summary>
            <param name="StartedAt">Date and time with end-user timezone when en event starts</param>
            <param name="FinishedAt">Date and time with end-user timezone when an event finishes</param>
            <param name="Name">User event type name, e.g. 'nice mood', 'headache', etc</param>
            <param name="Description">Description given by user, when user_event_type based on this one will be created.</param>
            <param name="Color">A color that events will be drawing with in a calendar.</param>
            <param name="Tags">A list of tags that will be automatically set to an each event</param>
            <param name="IsPublic">An owner who created this user_event_type could share it with other end-users</param>
            <param name="Id">Entity id</param>
            <param name="CreatedAt">Date and UTC time of event_type creation</param>
            <param name="UpdateAt">Date and UTC time of event_type last update</param>
            <param name="IsDeleted">Soft deletion flag</param>
            <param name="ConcurrentToken">Update is possible only this token equals to the token in the storage</param>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.DurationEventType.StartedAt">
            <summary>Date and time with end-user timezone when en event starts</summary>
        </member>
        <member name="P:Hrim.Event.Analytics.Models.EventTypes.DurationEventType.FinishedAt">
            <summary>Date and time with end-user timezone when an event finishes</summary>
        </member>
    </members>
</doc>
